{
  
    
        "post0": {
            "title": "Title",
            "content": "&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&quot; integrity=&quot;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&quot; crossorigin=&quot;anonymous&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;style&gt; #myBtn { display: none; position: fixed; bottom: 20px; right: 30px; z-index: 99; font-size: 18px; border: none; outline: none; background-color: gray; color: white; cursor: pointer; padding: 15px; border-radius: 4px; } #myBtn:hover { background-color: #555; } button { opacity: 0.5; } button:hover { opacity: 1.0; } html { scroll-behavior: smooth; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick=&quot;topFunction()&quot; id=&quot;myBtn&quot; title=&quot;Go to top&quot;&gt;^&lt;/button&gt; &lt;!--snake game code --&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;div id=&quot;score&quot;&gt;0&lt;/div&gt; &lt;canvas id=&quot;snakeboard&quot; width=&quot;475&quot; height=&quot;475&quot;&gt;&lt;/canvas&gt; &lt;!-- sets up the board/dimension of the board --&gt; &lt;!--formatting the format and design of the snake board and the score --&gt; &lt;!--future plans: add grids in the snakeboard--&gt; &lt;style&gt; #snakeboard { position: absolute; top: 50%; left: 69%; transform: translate(-50%, -50%); } #score { text-align: center; font-size: 140px; } &lt;/style&gt; &lt;/body&gt; &lt;/html&gt; &lt;/body&gt; &lt;/html&gt; . File &lt;tokenize&gt;:54 } ^ IndentationError: unindent does not match any outer indentation level . //Get the button var mybutton = document.getElementById(&quot;myBtn&quot;); // When the user scrolls down 20px from the top of the document, show the button window.onscroll = function() {scrollFunction()}; function scrollFunction() { if (document.body.scrollTop &gt; 20 || document.documentElement.scrollTop &gt; 20) { mybutton.style.display = &quot;block&quot;; } else { mybutton.style.display = &quot;none&quot;; } } // When the user clicks on the button, scroll to the top of the document function topFunction() { document.body.scrollTop = 0; document.documentElement.scrollTop = 0; } . const board_border = &#39;black&#39;; /*setting up the color of the board and snake*/ const board_background = &quot;white&quot;; const snake_col = &#39;cyan&#39;; const snake_border = &#39;darkblue&#39;; let snake = [ {x: 200, y: 200}, {x: 190, y: 200}, {x: 180, y: 200}, {x: 170, y: 200}, {x: 160, y: 200} ] let score = 0; let changing_direction = false; /* True if changing direction*/ let food_x; let food_y; let dx = 10; /* horizontal distance change */ let dy = 0; /*vertical distance change */ const snakeboard = document.getElementById(&quot;snakeboard&quot;); /*get canvas element */ const snakeboard_ctx = snakeboard.getContext(&quot;2d&quot;); /* start game*/ main(); gen_food(); document.addEventListener(&quot;keydown&quot;, change_direction); // main function called repeatedly to keep the game running function main() { /*defining function main.*/ if (has_game_ended()) return; changing_direction = false; /*if the player does not change the direction*/ setTimeout(function onTick() { clear_board(); drawFood(); move_snake(); drawSnake(); // Repeat main(); }, 100) } // draw a border around the canvas function clear_board() { // Select the color to fill the drawing snakeboard_ctx.fillStyle = board_background; // Select the colour for the border of the canvas snakeboard_ctx.strokestyle = board_border; // Draw a &quot;filled&quot; rectangle to cover the entire canvas snakeboard_ctx.fillRect(0, 0, snakeboard.width, snakeboard.height); // Draw a &quot;border&quot; around the entire canvas snakeboard_ctx.strokeRect(0, 0, snakeboard.width, snakeboard.height); } /*Draw the snake on the canvas*/ function drawSnake() { snake.forEach(drawSnakePart) } /*creating food */ function drawFood() { snakeboard_ctx.fillStyle = &#39;lightgreen&#39;; snakeboard_ctx.strokestyle = &#39;darkgreen&#39;; snakeboard_ctx.fillRect(food_x, food_y, 10, 10); snakeboard_ctx.strokeRect(food_x, food_y, 10, 10); } function drawSnakePart(snakePart) { /*draws the new boxes of snake, i.e. parts of snake*/ snakeboard_ctx.fillStyle = snake_col; /*color of new part is the same as snake_col defined before*/ snakeboard_ctx.strokestyle = snake_border; /*color of the border of new part is the same as snake_border defined before*/ snakeboard_ctx.fillRect(snakePart.x, snakePart.y, 10, 10); /*fills in the new part with color + locate the color of the new part to the end of the snake*/ snakeboard_ctx.strokeRect(snakePart.x, snakePart.y, 10, 10); /*draws a border aroudn the new part + locate the border to the end of the snake */ } function has_game_ended() { for (let i = 4; i &lt; snake.length; i++) { if (snake[i].x === snake[0].x &amp;&amp; snake[i].y === snake[0].y) return true /* === means that the two things on both sides are of the same type and value*/ /* &amp;&amp; = and. both as to be true in order to return true */ } const hitLeftWall = snake[0].x &lt; 0; const hitRightWall = snake[0].x &gt; snakeboard.width-20; const hitTopWall = snake[0].y &lt; 0; const hitBottomWall = snake[0].y &gt; snakeboard.height-20; return hitLeftWall || hitRightWall || hitTopWall || hitBottomWall } function random_food(min, max) { return Math.round((Math.random() * (max-min) + min) / 10) * 10; } function gen_food() { food_x = random_food(0, snakeboard.width - 10); /*generate random x-coord of food*/ /*-10 so that it does not generate the x coord on where the wall is located at*/ food_y = random_food(0, snakeboard.height - 10); /*generate random y-coord of food*/ snake.forEach(function has_snake_eaten_food(part) { const has_eaten = part.x == food_x &amp;&amp; part.y == food_y; if (has_eaten) gen_food(); }); /*if the food location is the snake location, generate new location*/ } function change_direction(event) { const LEFT_KEY = 37; const RIGHT_KEY = 39; const UP_KEY = 38; const DOWN_KEY = 40; // Prevent the snake from reversing if (changing_direction) return; changing_direction = true; /*if the players changes direction */ const keyPressed = event.keyCode; /*keyPressed stores information about which key is pressed*/ const goingUp = dy === -10; const goingDown = dy === 10; const goingRight = dx === 10; const goingLeft = dx === -10; /*code above sets the value of each turn*/ if (keyPressed === LEFT_KEY &amp;&amp; !goingRight) { dx = -10; dy = 0; } /* if left key is pressed and the snake is not going right, then dx = -10 and dy = 0*/ if (keyPressed === UP_KEY &amp;&amp; !goingDown) { dx = 0; dy = -10; } /* if up key is pressed and the snake is not going down, then dx = 0 and dy = -10*/ if (keyPressed === RIGHT_KEY &amp;&amp; !goingLeft) { dx = 10; dy = 0; } /* if right key is pressed and the snake is not going left, then dx = 10 and dy = 0*/ if (keyPressed === DOWN_KEY &amp;&amp; !goingUp) { dx = 0; dy = 10; } /* if down key is pressed and the snake is not going up, then dx = 0 and dy = 10*/ } function move_snake() { // Create the new Snake&#39;s head const head = {x: snake[0].x + dx, y: snake[0].y + dy}; // Add the new head to the beginning of snake body snake.unshift(head); const has_eaten_food = snake[0].x === food_x &amp;&amp; snake[0].y === food_y; if (has_eaten_food) { score += 10; /*add score*/ document.getElementById(&#39;score&#39;).innerHTML = score; /*display score*/ gen_food(); /*generate new food location*/ } else { // Remove the last part of snake body snake.pop(); } } .",
            "url": "https://b-g101.github.io/BASE/2022/09/01/snake-game.html",
            "relUrl": "/2022/09/01/snake-game.html",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://b-g101.github.io/BASE/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://b-g101.github.io/BASE/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://b-g101.github.io/BASE/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://b-g101.github.io/BASE/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}